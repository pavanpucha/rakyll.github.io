<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tooling on Go, the unwritten parts</title>
    <link>https://rakyll.org/tags/tooling/</link>
    <description>Recent content in Tooling on Go, the unwritten parts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 May 2017 11:27:27 -0400</lastBuildDate>
    
	<atom:link href="https://rakyll.org/tags/tooling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Debugging Go core dumps</title>
      <link>https://rakyll.org/coredumps/</link>
      <pubDate>Mon, 22 May 2017 11:27:27 -0400</pubDate>
      
      <guid>https://rakyll.org/coredumps/</guid>
      <description>Debugging is highly useful to examine the execution flow and to understand the current state of a program. Debugging of core dumps is another diagnostics aid to debug the misbehavior of production services.
Why to debug core dumps?
 You may have running programs that has crashed unexpectedly, and you want to investigate why. There might be issues that are only reproducible during production time and you want to understand the state of a program while it is running in a specific environment.</description>
    </item>
    
    <item>
      <title>Mutex profile</title>
      <link>https://rakyll.org/mutexprofile/</link>
      <pubDate>Mon, 19 Dec 2016 11:27:27 -0400</pubDate>
      
      <guid>https://rakyll.org/mutexprofile/</guid>
      <description>Go 1.8 introduces a new profile, the contended mutex profile, that allows you to capture a fraction of the stack traces of goroutines with contended mutexes.
You need to set the sampling fraction by calling runtime.SetMutexProfileFraction to a value above zero to enable collection.
Consider the following program:
import _ &amp;quot;net/http/pprof&amp;quot; var mu sync.Mutex var items = make(map[int]struct{}) runtime.SetMutexProfileFraction(5) for i := 0; i &amp;lt; 1000*1000; i++ { go func(i int) { mu.</description>
    </item>
    
    <item>
      <title>The default GOPATH</title>
      <link>https://rakyll.org/default-gopath/</link>
      <pubDate>Wed, 14 Dec 2016 11:27:27 -0400</pubDate>
      
      <guid>https://rakyll.org/default-gopath/</guid>
      <description>Go 1.8 will set a default GOPATH if the GOPATH env variable is not set.
The requirement of setting a GOPATH has been a major issue for Go users who installed the Go tools for the first time and got the &amp;ldquo;you have to set a GOPATH&amp;rdquo; error in their initial experience with the tools. Explaining the GOPATH is and instructing how to set this env variable were both distracting new users away from using Go.</description>
    </item>
    
    <item>
      <title>Debugging code generation in Go</title>
      <link>https://rakyll.org/codegen/</link>
      <pubDate>Sat, 15 Oct 2016 11:27:27 -0400</pubDate>
      
      <guid>https://rakyll.org/codegen/</guid>
      <description>Last week, I was at dotGo, participating one of the finest Go conferences and catching up with gophers from the other side of the Atlantic. I gave a very short lightning talk about inspection of code generation with the tools alrady available in the toolchain. This post goes through the talk for those who didn&amp;rsquo;t have to priviledge to be at the conference. Slides are also available at go-talks.</description>
    </item>
    
    <item>
      <title>Go tooling essentials</title>
      <link>https://rakyll.org/go-tool-flags/</link>
      <pubDate>Sun, 25 Sep 2016 11:27:27 -0400</pubDate>
      
      <guid>https://rakyll.org/go-tool-flags/</guid>
      <description>New to the Go tools? Or do you want to expand your knowledge? This article is about the flags for the Go tools everyone should know.
Disclaimer: This article might be slightly biased. This is a collection of flags I personally use and flags people around me having trouble finding references for. If you have more ideas, ping me on Twitter.
$ go build -x -x lists all the commands go build invokes.</description>
    </item>
    
    <item>
      <title>Examples coverage</title>
      <link>https://rakyll.org/examples-coverage/</link>
      <pubDate>Thu, 08 Sep 2016 11:27:27 -0400</pubDate>
      
      <guid>https://rakyll.org/examples-coverage/</guid>
      <description>Go programming language provides many unique good features to write and maintain examples for your packages backed by the testing tools.
As an addition to the test coverage and test coverage report, go test also can provide coverage for testable examples.
Use the following commands in your package to use the -run flag to only the match the example tests and view the results in your browser.
$ go test -v -run=Example -coverprofile=c.</description>
    </item>
    
    <item>
      <title>Using Instruments to profile Go programs</title>
      <link>https://rakyll.org/instruments/</link>
      <pubDate>Fri, 02 Sep 2016 11:27:27 -0400</pubDate>
      
      <guid>https://rakyll.org/instruments/</guid>
      <description>Apple has a suite of instrumentation and tracing tools for performance analysis avaiable as a part of their Xcode tooling set. In this article, we will use Instruments to record and analyze the CPU profile of a Go program.
Instruments also provide a large set of macOS-specific tracing and profiling if you have performance issues specifically on darwin.
Some of these specific profiles are:
 System trace: Collects comprehensive information about system calls, scheduling, user-kernel space transitions.</description>
    </item>
    
    <item>
      <title>Apply transformations to Go code with eg</title>
      <link>https://rakyll.org/eg/</link>
      <pubDate>Sat, 27 Aug 2016 11:27:27 -0400</pubDate>
      
      <guid>https://rakyll.org/eg/</guid>
      <description>If you are willing to make large scale refactoring in your Go programs, automating the refactoring tasks is more desirable than manual editing. eg is a program that allows you to perform transformations based on template Go files.
To install the tool, run the following:
$ go get golang.org/x/tools/cmd/eg  eg requires a template file to look for which transformation it should apply to your source code. What&amp;rsquo;s nice is that the template file is a Go file with little annotations.</description>
    </item>
    
    <item>
      <title>Go cross compilation</title>
      <link>https://rakyll.org/cross-compilation/</link>
      <pubDate>Tue, 08 Sep 2015 11:27:27 -0400</pubDate>
      
      <guid>https://rakyll.org/cross-compilation/</guid>
      <description>Note: This article extends Dave Cheney’s Go 1.5 cross compilers post.
Cross compilers got easier with Go 1.5. You don’t have to bootstrap the standard library and toolchain as you used to do prior to 1.5.
If cgo is not required The go tool won’t require any bootstrapping if cgo is not required. That allows you to target the following program to any GOOS/GOARCH without requiring you to do any additional work.</description>
    </item>
    
  </channel>
</rss>