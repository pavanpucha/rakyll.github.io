<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Readability on Go, the unwritten parts</title>
    <link>https://rakyll.org/tags/readability/</link>
    <description>Recent content in Readability on Go, the unwritten parts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>rakyll@rakyll.org (Jaana Burcu Dogan)</managingEditor>
    <webMaster>rakyll@rakyll.org (Jaana Burcu Dogan)</webMaster>
    <lastBuildDate>Fri, 03 Feb 2017 11:27:27 -0400</lastBuildDate>
    
	<atom:link href="https://rakyll.org/tags/readability/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Naming tests to self-document</title>
      <link>https://rakyll.org/naming-tests-to-doc/</link>
      <pubDate>Fri, 03 Feb 2017 11:27:27 -0400</pubDate>
      <author>rakyll@rakyll.org (Jaana Burcu Dogan)</author>
      <guid>https://rakyll.org/naming-tests-to-doc/</guid>
      <description>Go doesn&amp;rsquo;t specifically enforce you how you choose your test names. Tests are a significant contributors for the maintainability of your code. Tests not just providing correctness checking but also are useful in self documenting your code and its usage. On top of that, tests are the single best source to read about responsibilities of a type, function, etc. This is where naming tests better can help the internal documentation and therefore the maintainability of your code.</description>
    </item>
    
    <item>
      <title>Style guideline for Go packages</title>
      <link>https://rakyll.org/style-packages/</link>
      <pubDate>Sat, 14 Jan 2017 11:27:27 -0400</pubDate>
      <author>rakyll@rakyll.org (Jaana Burcu Dogan)</author>
      <guid>https://rakyll.org/style-packages/</guid>
      <description>Go is about naming and organization as much as everything else in the language. Well-organized Go code is easy to discover, use and read. Well-organized code is as critical as well designed APIs. The location, name, and the structure of your packages are the first elements your users see and interact with.
This document&amp;rsquo;s goal is to guide you with common good practices not to set rules. You will always need to use your own judgement to pick the most elegant solution for your specific case.</description>
    </item>
    
    <item>
      <title>Interface pollution in Go</title>
      <link>https://rakyll.org/interface-pollution/</link>
      <pubDate>Sat, 18 Oct 2014 11:27:27 -0400</pubDate>
      <author>rakyll@rakyll.org (Jaana Burcu Dogan)</author>
      <guid>https://rakyll.org/interface-pollution/</guid>
      <description>If there was a single powerful language feature in Go, it’d be the interfaces. The internals of Go contain strong combinations of useful ideas from various type systems and inevitably they ring the curiosity bells. I recently surveyed Github for Go interface declarations, and the results indicated that Go users pollute the environment with interfaces no one needs or will use.
Don’t export any interfaces until you have to.
Interfaces are great, but interface pollution is not so.</description>
    </item>
    
  </channel>
</rss>